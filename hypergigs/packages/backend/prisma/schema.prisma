generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(uuid())
  email                 String           @unique
  username              String           @unique
  password              String
  firstName             String?
  lastName              String?
  role                  String           @default("FREELANCER")
  bio                   String?
  location              String?
  avatar                String?
  available             Boolean          @default(true)
  nextAvailability      DateTime?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  hourlyRate            Float?
  following             Follow[]         @relation("UserFollowing")
  followers             Follow[]         @relation("UserFollowers")
  receivedInvitations   Invitation[]     @relation("InvitationReceiver")
  sentInvitations       Invitation[]     @relation("InvitationSender")
  receivedMessages      Message[]        @relation("MessageReceiver")
  sentMessages          Message[]        @relation("MessageSender")
  receivedNotifications Notification[]   @relation("NotificationReceiver")
  sentNotifications     Notification[]   @relation("NotificationSender")
  portfolios            Portfolio[]
  ownedTeams            Team[]           @relation("TeamOwner")
  teamMembers           TeamMember[]
  skills                UserSkill[]
  workExperiences       WorkExperience[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([location])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  description String?
  avatar      String?
  type        String       @default("PROJECT")
  city        String?
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invitations Invitation[]
  messages    Message[]
  projects    Project[]
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]

  @@index([slug])
  @@index([ownerId])
  @@index([type])
}

model TeamMember {
  id       String   @id @default(uuid())
  role     String   @default("MEMBER")
  userId   String
  teamId   String
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Invitation {
  id         String   @id @default(uuid())
  status     String   @default("PENDING")
  role       String   @default("MEMBER")
  message    String?
  expiresAt  DateTime
  senderId   String
  receiverId String
  teamId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([teamId])
  @@index([status])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  read       Boolean  @default(false)
  senderId   String
  receiverId String?
  teamId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User?    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  team       Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([teamId])
  @@index([createdAt])
}

model Notification {
  id         String   @id @default(uuid())
  type       String
  message    String
  read       Boolean  @default(false)
  entityId   String?
  entityType String?
  senderId   String?
  receiverId String
  createdAt  DateTime @default(now())
  receiver   User     @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?    @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([receiverId])
  @@index([read])
  @@index([createdAt])
}

model Skill {
  id        String      @id @default(uuid())
  name      String      @unique
  category  String?
  createdAt DateTime    @default(now())
  users     UserSkill[]
}

model UserSkill {
  id      String @id @default(uuid())
  userId  String
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
}

model Portfolio {
  id          String   @id @default(uuid())
  name        String
  description String?
  companyName String?
  role        String?
  workUrls    String?
  mediaFiles  String?  @default("[]") // JSON array stored as string for SQLite compatibility
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WorkExperience {
  id          String    @id @default(uuid())
  title       String
  company     String
  description String?
  startDate   DateTime
  endDate     DateTime?
  present     Boolean   @default(false)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id           String    @id @default(uuid())
  title        String
  description  String
  workLocation String?
  startDate    DateTime?
  duration     Int?
  minCost      Int?
  maxCost      Int?
  currency     String?
  teamId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  team         Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}
